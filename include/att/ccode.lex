.VERSION 1.0

.COMMENT ############################
         ###  UNSEGMENTED LEXICON ###
         ############################

.LEXICON_SOURCE	att
.LEXICON_ID 	ccode

.LEXICON_CONTACT
         Name:		Donnie Henderson
         Affiliation:	AT&T Bell Labs, dept. 11359
         Address:	101 Crawfords corner road, room 4g-313
         Phone:		+1 (908) 949-4591
         Fax:		+1 (908) 949-7722
         Email:		don@research.att.com

.LEXICON_INFO
	 Source:	Sources of c code from our department
	 Purpose:	Introduce lots of symbols
	 Language:	c and English comments

.COMMENT Multiple spaces stand only for one space. The data collector was
displaying these many spaces for clarity.

.LEXICON 
"/   standalone   "
"program   that   "
"can   read   a "
"network   description   "
"from   a .  fp   "
"file   /   and   "
"then   reads   "
"inputs   from   "
"stdin   and   writes   "
"the   results   "
"to   stdout.   "
"/   typical   usage  :   "
"<  input   fprop   "
"mynet.fp   >   "
"output   /   if   "
"no   .  fp   filename   "
"given   on   the   "
"command   line  ,   "
"the   default   "
"is   test1.  fp   "
"#  include   <  stdio.h  >   "
"#  include   <  libc.h  >   "
"#  include   \"  fprop.h  \"   "
"#  include   \"  fpeng.h  \"   "
"#  include   #  include   "
"\"  f  1scanf.h  \"   "
"#  include   \"  iodef.h  \"   "
"/   ISA  :   important   "
"for   I  /  O   definition   "
"extern   FILE  *   "
"in   =   stdin  ;   "
"extern   FILE  *   "
"out   =   stdout  ;   "
"static   NetArea   "
"myna   =   {  0  ,   "
"0,   0  ,   0  ,   0  ,   "
"0,   0  ,   0  ,   0  ,   "
"0,   0  ,   0  }  ;   int   "
"main  (  int   argc  ,   "
"char  *   argv  )  {   "
"/   pick   up   filename   "
"from   command   "
"line  ,   or   use   "
"default  :   char  *   "
"name   =   argc  >  1   "
"?   argv  [  1  ]   :   "
"\"  test1.  fp  \"  ;   "
"FILE  *   fp   =   "
"fopen  (  name  ,   "
"\"  r  \"  )  ;   char   "
"setbuf  (  in  ,   "
"bufin  )  ;   char   "
"setbuf  (  out  ,   "
"bufout  )  ;   if   "
"(  !  fp  )   {   \"  ?  Cannot   "
"open   file   '  %  s'\\  n  \"  ,   "
"name  )  ;   exit  (  2  )  ;   "
"}   /   see   if   "
"we   are   taking   "
"input   from   "
"an   interactive   "
"tty  :   const   "
"int   interactive   "
"=   if   (  !  fp  )   "
"exit  (  1  )  ;   /   "
"allocate   the   "
"network   descriptor  :   "
"Net   mynet  ;   "
"/   read   in   the   "
"weights  ,   structure  ,   "
"etc.   from   the   "
"file  :   \"  Loading   "
"net  ,   please   "
"wait   .   \\  n  \"  )  ;   "
"mynet  ,   myna  )  ;   "
"if   exit  (  2  )  ;   "
"for  (  ;  )  {   /   loop   "
"over   all   input   "
"records   if   "
"{   /   print   a "
"prompt   \"  -  >   "
"\"  )  ;   /   so   user   "
"will   know   we're   "
"waiting   }   /   "
"loop   over   all   "
"numbers   in   "
"this   input   "
"record   for   "
"(  int   ii   =   0  ;   "
"ii   <   mynet.nin  ;   "
"ii  +  )  {   /   read   "
"them   directly   "
"into   the   input   "
"unit   activation   "
"levels  :   #  ifdef   "
"ASCII   int   krud   "
"=   f  1scanf  (  in  ,   "
"\"  %  f  \"  ,   mynet.in   "
"+   ii  )  ;   if   (  krud   "
"!  =   1  )   {   if   "
"(  krud   =   EOF   "
"&   ii   =   0  )   exit  (  0  )  ;   "
"\"  ?  Bad   input  \\  n  \"  )  ;   "
"exit  (  1  )  ;   }   "
"#  elif   BLINTERFACE   "
"int   krud   =   "
"f  1scanf  (  in  ,   "
"\"  %  f  \"  ,   mynet.in   "
"+   ii  )  ;   if   (  krud   "
"!  =   1  )   {   if   "
"(  krud   =   EOF   "
"&   ii   =   0  )   exit  (  0  )  ;   "
"\"  ?  Bad   input  \\  n  \"  )  ;   "
"exit  (  1  )  ;   }   "
"#  elif   BINARY   "
"+   ii  ,   1  ,   in  )  ;   "
"{   \"  ?  Error  :   "
"bad   input  \\  n  \"  )  ;   "
"exit  (  1  )  ;   }   "
"#  endif   }   /   "
"here   with   input   "
"set   up   /   perform   "
"the   fprop   network   "
"calculation   "
"/   loop   over   "
"all   numbers   "
"in   this   output   "
"record  :   for   "
"(  int   oo   =   0  ;   "
"oo   <   mynet.nout  ;   "
"oo  +  )  {   #  ifdef   "
"ASCII   \"  %  f   \"  ,   "
"#  else   1  ,   out  )  ;   "
"#  endif   }   #  ifdef   "
"ASCII   \"  \\  n  \"  )  ;   "
"#  endif   }   }   "
"/  *   netmail.c   "
"-   queue   mail   "
"for   the   network   "
"server   *  /   /  *   "
"LINTLIBRARY   "
"*  /   #  include   "
"#  include   <  stdio.h  >   "
"#  include   #  define   "
"NOTOK   (  -  1  )   "
"#  define   OK   "
"0   #  define   NBYTES   "
"8   static   int   "
"files   =   0  ;   "
"static   char   "
"hex  [  ]   =   static   "
"union   {   char   "
"struct   {   long   "
"clock  ;   short   "
"pid  ;   short   "
"id  ;   }   stamp  ;   "
"}   template  ;   "
"static   char   "
"static   char   "
"static   FILE   "
"*   fp  ;   long   "
"time   (  )  ;   char   "
"*  cdate   (  )  ,   "
"*  ctime   (  )  ;   "
"/ * * /   int   "
"nminit   (  user  ,   "
"clock  )   register   "
"char   *  user  ;   "
"register   long   "
"*  clock  ;   {   quefile   "
"(  quefil  ,   wrkfil  )  ;   "
"(  void  )   unlink   "
"(  wrkfil  )  ;   if   "
"(  fp   =   fopen   "
"(  wrkfil  ,   \"  w  \"  )   "
"=   NULL  )   return   "
"NOTOK  ;   (  void  )   "
"chmod   (  wrkfil  ,   "
"0600  )  ;   fprintf   "
"(  fp  ,   \"  %  s   %  s  \\  n  \"  ,   "
"user  ,   cdate   "
"(  clock  )  ;   return   "
"OK  ;   }   int   nmwadr   "
"(  mbox  ,   host  )   "
"register   char   "
"*  mbox  ,   *  host  ;   "
"{   fprintf   (  fp  ,   "
"\"  /  %  s   %  s  \\  n  \"  ,   "
"host  ,   mbox  )  ;   "
"return   OK  ;   "
"}   int   nmwaend   "
"(  )   {   putc   (  '  \\  n',   "
"fp  )  ;   return   "
"OK  ;   }   int   nmwtxt   "
"(  buffer  ,   cnt  )   "
"register   char   "
"*  buffer  ;   register   "
"int   cnt  ;   {   "
"if   (  fwrite   "
"(  buffer  ,   sizeof   "
"*  buffer  ,   cnt  ,   "
"fp  )   !  =   cnt  )   "
"return   NOTOK  ;   "
"return   OK  ;   "
"}   int   nmwtend   "
"(  )   {   (  void  )   "
"fclose   (  fp  )  ;   "
"if   (  link   (  wrkfil  ,   "
"quefil  )   =   NOTOK   "
"|   unlink   (  wrkfil  )   "
"=   NOTOK  )   return   "
"NOTOK  ;   return   "
"OK  ;   }   /  * "
"*  /   static   quefile   "
"(  que  ,   lnk  )   "
"register   char   "
"*  que  ,   *  lnk  ;   "
"{   register   "
"char   *  p  ,   *  q  ;   "
"char   =   getpid   "
"(  )  ;   =   files  +  ;   "
"if   (  files   >  =   "
"256  )   {   files   "
"=   0  ;   sleep   "
"(  1  )  ;   }   (  void  )   "
"time   p =   buffer  ;   "
"for   (  q   =   q "
"<   q  +  )   {   *  p  +   "
"=   hex  [  (  *  q   >   "
"4  )   &   0  xf  ]  ;   "
"*  p  +   =   hex  [  (  *  q  )   "
"&   0  xf  ]  ;   }   *  p   "
"=   NULL  ;   (  void  )   "
"sprintf   (  que  ,   "
"\"  %  s  /  %  s  \"  ,   Mailqdir  ,   "
"buffer  )  ;   (  void  )   "
"sprintf   (  lnk  ,   "
"\"  %  s  /  %  s  \"  ,   TMailqdir  ,   "
"buffer  )  ;   }   "
"/ * * / static   "
"char   *  cdate   "
"(  clock  )   register   "
"long   *  clock  ;   "
"{   char   *  cp  ;   "
"cp   =   ctime   "
"(  clock  )  ;   cp  [  1  ]   "
"=   cp  [  8  ]  ;   cp  [  2  ]   "
"=   cp  [  9  ]  ;   cp  [  3  ]   "
"=   '  -  '  ;   cp  [  7  ]   "
"=   '  -  '  ;   cp  [  8  ]   "
"=   cp  [  22  ]  ;   cp  [  9  ]   "
"=   cp  [  23  ]  ;   cp  [  10  ]   "
"=   '  @  '  ;   cp  [  19  ]   "
"=   NULL  ;   return   "
"cp   +   1  ;   }   /  *   "
"modified   version   "
"of   fscanf   SKIPS   "
"OVER   COMMENTS   "
"comments   start   "
"with   a hash   "
"(  #  )   and   run   "
"to   the   end   "
"of   the   line   "
"Only   eats   comments   "
"once.   Therefore   "
"f  1scanf  (  fp  ,   "
"\"  %  d   %  d  \"  ,   &  a  ,   "
"&  b  )   ;   will   "
"fail   if   there   "
"is   a comment   "
"between   the   "
"two   numbers.   "
"The   preferred   "
"technique   is   "
"to   read   one   "
"at   a time  :   "
"f  1scanf  (  fp  ,   "
"\"  %  d  \"  ,   &  a  )   ;   "
"f  1scanf  (  fp  ,   "
"\"  %  d  \"  ,   &  b  )   ;   "
"Also  ,   if   you   "
"are   reading   "
"strings   with   "
"\"  %  s  \"   format  ,   "
"you   must   not   "
"run   the   string   "
"up   against   "
"the   hash.   Terminate   "
"your   string   "
"with   a space  ,   "
"tab  ,   or   newline.   "
"*  /   /  *   Usage   "
"example  :   #  include   "
"<  stdio.h  >   #  include   "
"\"  f  1scanf.h  \"   "
"main  (  int   argc  ,   "
"char  *   argv  )   "
"{   if   (  argc  )   "
"if   (  argv  )   ;   "
"int   krud  ;   char   "
"str  [  100  ]  ;   int   "
"num  ;   for   (  ;  )  {   "
"krud   =   \"  %  99  s  \"  ,   "
"str  )  ;   if   (  krud   "
"<   0  )   break  ;   "
"printf  (  \"  %  d   "
"%  s  \\  n  \"  ,   krud  ,   "
"str  )  ;   krud   "
"=   \"  %  d  \"  ,   &  num  )  ;   "
"if   (  krud   <   "
"0  )   break  ;   printf  (  \"  %  d   "
"%  d  \\  n  \"  ,   krud  ,   "
"num  )  ;   }   }   #   "
"this   is   an   "
"example   data   "
"file   abcd   1234   "
"#   comment   #   "
"comment   all   "
"by   itself   xyz   "
"#   comment   789   "
"#   comment   #   "
"blank   lines   "
"are   ok  :   aaaaaaa   "
"999999   #   end   "
"of   example   "
"file   *  /   #  include   "
"<  stdio.h  >   static   "
"char   sp   =   '   "
"'  ;   static   char   "
"tab   =   '   '  ;   "
"static   char   "
"nl   =   10  ;   static   "
"char   hash   =   "
"'  #  '  ;   int   f  1scanf  (  fp  ,   "
"control   ,   pnum  )   "
"FILE   *  fp  ;   char   "
"*  control  ;   void   "
"*  pnum  ;   {   char   "
"ch  ;   for   (  ;  )  {   "
"ch   =   getc  (  fp  )  ;   "
"if   (  ch   =   EOF  )   "
"break  ;   if   (  ch   "
"=   sp  )   continue  ;   "
"if   (  ch   =   tab  )   "
"continue  ;   if   "
"(  ch   =   nl  )   continue  ;   "
"if   (  ch   =   hash  )   "
"{   for   (  ;  )  {   "
"ch   =   getc  (  fp  )  ;   "
"if   (  ch   =   EOF  )   "
"goto   done  ;   "
"if   (  ch   =   nl  )   "
"break  ;   }   continue  ;   "
"}   /  *   here   if   "
"it   was   a readable   "
"character  *  /   "
"ungetc  (  ch  ,   "
"fp  )  ;   break  ;   "
"}   done  :   return  (   "
"fscanf  (  fp  ,   "
"control  ,   pnum  )   "
")  ;   }   /   standalone   "
"program   that   "
"can   read   a "
"network   description   "
"from   a .  fp   "
"file   /   and   "
"then   reads   "
"inputs   from   "
"stdin   and   writes   "
"the   results   "
"to   stdout.   "
"/   typical   usage  :   "
"<  input   fprop   "
"mynet.fp   >   "
"output   /   if   "
"no   .  fp   filename   "
"given   on   the   "
"command   line  ,   "
"the   default   "
"is   test1.  fp   "
"#  include   <  stdio.h  >   "
"#  include   <  libc.h  >   "
"#  include   \"  fprop.h  \"   "
"#  include   \"  fpeng.h  \"   "
"#  include   #  include   "
"\"  f  1scanf.h  \"   "
"#  include   \"  iodef.h  \"   "
"/   ISA  :   important   "
"for   I  /  O   definition   "
"extern   FILE  *   "
"in   =   stdin  ;   "
"extern   FILE  *   "
"out   =   stdout  ;   "
"static   NetArea   "
"myna   =   {  0  ,   "
"0,   0  ,   0  ,   0  ,   "
"0,   0  ,   0  ,   0  ,   "
"0,   0  ,   0  }  ;   int   "
"main  (  int   argc  ,   "
"char  *   argv  )  {   "
"/   pick   up   filename   "
"from   command   "
"line  ,   or   use   "
"default  :   char  *   "
"name   =   argc  >  1   "
"?   argv  [  1  ]   :   "
"\"  test1.  fp  \"  ;   "
"FILE  *   fp   =   "
"fopen  (  name  ,   "
"\"  r  \"  )  ;   char   "
"setbuf  (  in  ,   "
"bufin  )  ;   char   "
"setbuf  (  out  ,   "
"bufout  )  ;   if   "
"(  !  fp  )   {   \"  ?  Cannot   "
"open   file   '  %  s'\\  n  \"  ,   "
"name  )  ;   exit  (  2  )  ;   "
"}   /   see   if   "
"we   are   taking   "
"input   from   "
"an   interactive   "
"tty  :   const   "
"int   interactive   "
"=   if   (  !  fp  )   "
"exit  (  1  )  ;   /   "
"allocate   the   "
"network   descriptor  :   "
"Net   mynet  ;   "
"/   read   in   the   "
"weights  ,   structure  ,   "
"etc.   from   the   "
"file  :   \"  Loading   "
"net  ,   please   "
"wait   .   \\  n  \"  )  ;   "
"mynet  ,   myna  )  ;   "
"if   exit  (  2  )  ;   "
"for  (  ;  )  {   /   loop   "
"over   all   input   "
"records   if   "
"{   /   print   a "
"prompt   \"  -  >   "
"\"  )  ;   /   so   user   "
"will   know   we're   "
"waiting   }   /   "
"loop   over   all   "
"numbers   in   "
"this   input   "
"record   for   "
"(  int   ii   =   0  ;   "
"ii   <   mynet.nin  ;   "
"ii  +  )  {   /   read   "
"them   directly   "
"into   the   input   "
"unit   activation   "
"levels  :   #  ifdef   "
"ASCII   int   krud   "
"=   f  1scanf  (  in  ,   "
"\"  %  f  \"  ,   mynet.in   "
"+   ii  )  ;   if   (  krud   "
"!  =   1  )   {   if   "
"(  krud   =   EOF   "
"&   ii   =   0  )   exit  (  0  )  ;   "
"\"  ?  Bad   input  \\  n  \"  )  ;   "
"exit  (  1  )  ;   }   "
"#  elif   BLINTERFACE   "
"int   krud   =   "
"f  1scanf  (  in  ,   "
"\"  %  f  \"  ,   mynet.in   "
"+   ii  )  ;   if   (  krud   "
"!  =   1  )   {   if   "
"(  krud   =   EOF   "
"&   ii   =   0  )   exit  (  0  )  ;   "
"\"  ?  Bad   input  \\  n  \"  )  ;   "
"exit  (  1  )  ;   }   "
"#  elif   BINARY   "
"+   ii  ,   1  ,   in  )  ;   "
"{   \"  ?  Error  :   "
"bad   input  \\  n  \"  )  ;   "
"exit  (  1  )  ;   }   "
"#  endif   }   /   "
"here   with   input   "
"set   up   /   perform   "
"the   fprop   network   "
"calculation   "
"/   loop   over   "
"all   numbers   "
"in   this   output   "
"record  :   for   "
"(  int   oo   =   0  ;   "
"oo   <   mynet.nout  ;   "
"oo  +  )  {   #  ifdef   "
"ASCII   \"  %  f   \"  ,   "
"#  else   1  ,   out  )  ;   "
"#  endif   }   #  ifdef   "
"ASCII   \"  \\  n  \"  )  ;   "
"#  endif   }   }   "
"}  "
